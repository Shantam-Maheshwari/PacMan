/*
 PACMAN
 Made By:Savit Gupta, Shamay G Samuel, Shantam Maheshwari
 Class: XI-I
*/

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>

//Global Variables + Mazes(Array)
int Points=0,Death=0;
char Maze[21][27]={
 {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#','G','*','*','*','*','*','*','*','*','*','*','*','#','*','*','*','*','*','*','*','*','*','*','*','G','#'},
 {'#','*','#','#','#','#','*','#','#','#','#','#','*','#','*','#','#','#','#','#','*','#','#','#','#','*','#'},
 {'#','*','#','#','#','#','*','#','#','#','#','#','*','#','*','#','#','#','#','#','*','#','#','#','#','*','#'},
 {'#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','#'},
 {'#','*','#','#','#','#','*','#','*','#','#','#','#','#','#','#','#','#','*','#','*','#','#','#','#','*','#'},
 {'#','*','*','*','*','*','*','#','*','*','*','*','*','#','*','*','*','*','*','#','*','*','*','*','*','*','#'},
 {'#','#','#','#','#','#','*','#','#','#','#','#',' ','#',' ','#','#','#','#','#','*','#','#','#','#','#','#'},
 {' ',' ',' ',' ',' ','#','*','#','G',' ',' ',' ',' ','G',' ',' ',' ',' ','G','#','*','#',' ',' ',' ',' ',' '},
 {' ',' ',' ',' ',' ','#','*','#',' ','#','#','#','#','#','#','#','#','#',' ','#','*','#',' ',' ',' ',' ',' '},
 {' ',' ',' ',' ',' ','#','*','#',' ','#','#','#','#','#','#','#','#','#',' ','#','*','#',' ',' ',' ',' ',' '},
 {' ',' ',' ',' ',' ','#','*','#','G',' ',' ',' ',' ','G',' ',' ',' ',' ','G','#','*','#',' ',' ',' ',' ',' '},
 {'#','#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#',' ','#','*','#','#','#','#','#','#'},
 {'#','*','*','*','*','*','*','*','*','*','*','*','*','#','*','*','*','*','*','*','*','*','*','*','*','*','#'},
 {'#','*','#','#','#','*','#','#','#','#','#','#','*','#','*','#','#','#','#','#','#','*','#','#','#','*','#'},
 {'#','*','*','*','#','*','*','*','*','*','*','*','*','P','*','*','*','*','*','*','*','*','#','*','*','*','#'},
 {'#','#','#','*','#','*','#','*','#','#','#','#','#','#','#','#','#','#','#','*','#','*','#','*','#','#','#'},
 {'#','*','*','*','*','*','#','*','*','*','*','*','*','#','*','*','*','*','*','*','#','*','*','*','*','*','#'},
 {'#','*','#','#','#','#','#','#','#','#','#','#','*','#','*','#','#','#','#','#','#','#','#','#','#','*','#'},
 {'#','G','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','G','#'},
 {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}};
char MazeScore[21][27]={
 {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#','*','*','*','*','*','*','*','*','*','*','*','*','#','*','*','*','*','*','*','*','*','*','*','*','*','#'},
 {'#','*','#','#','#','#','*','#','#','#','#','#','*','#','*','#','#','#','#','#','*','#','#','#','#','*','#'},
 {'#','*','#','#','#','#','*','#','#','#','#','#','*','#','*','#','#','#','#','#','*','#','#','#','#','*','#'},
 {'#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','#'},
 {'#','*','#','#','#','#','*','#','*','#','#','#','#','#','#','#','#','#','*','#','*','#','#','#','#','*','#'},
 {'#','*','*','*','*','*','*','#','*','*','*','*','*','#','*','*','*','*','*','#','*','*','*','*','*','*','#'},
 {'#','#','#','#','#','#','*','#','#','#','#','#',' ','#',' ','#','#','#','#','#','*','#','#','#','#','#','#'},
 {' ',' ',' ',' ',' ','#','*','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','*','#',' ',' ',' ',' ',' '},
 {' ',' ',' ',' ',' ','#','*','#',' ','#','#','#','#','#','#','#','#','#',' ','#','*','#',' ',' ',' ',' ',' '},
 {' ',' ',' ',' ',' ','#','*','#',' ','#','#','#','#','#','#','#','#','#',' ','#','*','#',' ',' ',' ',' ',' '},
 {' ',' ',' ',' ',' ','#','*','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','*','#',' ',' ',' ',' ',' '},
 {'#','#','#','#','#','#','*','#',' ','#','#','#','#','#','#','#','#','#',' ','#','*','#','#','#','#','#','#'},
 {'#','*','*','*','*','*','*','*','*','*','*','*','*','#','*','*','*','*','*','*','*','*','*','*','*','*','#'},
 {'#','*','#','#','#','*','#','#','#','#','#','#','*','#','*','#','#','#','#','#','#','*','#','#','#','*','#'},
 {'#','*','*','*','#','*','*','*','*','*','*','*','*',' ','*','*','*','*','*','*','*','*','#','*','*','*','#'},
 {'#','#','#','*','#','*','#','*','#','#','#','#','#','#','#','#','#','#','#','*','#','*','#','*','#','#','#'},
 {'#','*','*','*','*','*','#','*','*','*','*','*','*','#','*','*','*','*','*','*','#','*','*','*','*','*','#'},
 {'#','*','#','#','#','#','#','#','#','#','#','#','*','#','*','#','#','#','#','#','#','#','#','#','#','*','#'},
 {'#','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','#'},
 {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}};
char MazeGhost[21][27]={
 {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
 {'#','G',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','G','#'},
 {'#',' ','#','#','#','#',' ','#','#','#','#','#',' ','#',' ','#','#','#','#','#',' ','#','#','#','#',' ','#'},
 {'#',' ','#','#','#','#',' ','#','#','#','#','#',' ','#',' ','#','#','#','#','#',' ','#','#','#','#',' ','#'},
 {'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
 {'#',' ','#','#','#','#',' ','#',' ','#','#','#','#','#','#','#','#','#',' ','#',' ','#','#','#','#',' ','#'},
 {'#',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ','#'},
 {'#','#','#','#','#','#',' ','#','#','#','#','#',' ','#',' ','#','#','#','#','#',' ','#','#','#','#','#','#'},
 {' ',' ',' ',' ',' ','#',' ','#','G',' ',' ',' ',' ','G',' ',' ',' ',' ','G','#',' ','#',' ',' ',' ',' ',' '},
 {' ',' ',' ',' ',' ','#',' ','#',' ','#','#','#','#','#','#','#','#','#',' ','#',' ','#',' ',' ',' ',' ',' '},
 {' ',' ',' ',' ',' ','#',' ','#',' ','#','#','#','#','#','#','#','#','#',' ','#',' ','#',' ',' ',' ',' ',' '},
 {' ',' ',' ',' ',' ','#',' ','#','G',' ',' ',' ',' ','G',' ',' ',' ',' ','G','#',' ','#',' ',' ',' ',' ',' '},
 {'#','#','#','#','#','#',' ','#',' ','#','#','#','#','#','#','#','#','#',' ','#',' ','#','#','#','#','#','#'},
 {'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
 {'#',' ','#','#','#',' ','#','#','#','#','#','#',' ','#',' ','#','#','#','#','#','#',' ','#','#','#',' ','#'},
 {'#',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#'},
 {'#','#','#',' ','#',' ','#',' ','#','#','#','#','#','#','#','#','#','#','#',' ','#',' ','#',' ','#','#','#'},
 {'#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#'},
 {'#',' ','#','#','#','#','#','#','#','#','#','#',' ','#',' ','#','#','#','#','#','#','#','#','#','#',' ','#'},
 {'#','G',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','G','#'},
 {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}};

//Structures for Pacman & Ghosts + Global structure declaration
struct Pacman
{
 int Pr;
 int Pc;
}P0;
struct Ghost
{
 int Gr;
 int Gc;
}G1,G2,G3,G4,G5,G6,G7,G8,G9,G10;

//Function Declarations
void Disp(int,int);
void MoveP();
void MoveG(Ghost&);
int CheckWallP(int,int);
int CheckWallG(int,int);
void CheckGhost();
void Score();

//Running Program
void main()
{
 clrscr();

 //Initial structure position in Maze
 P0.Pr=15; P0.Pc=13;
 G1.Gr=1; G1.Gc=1;
 G2.Gr=1; G2.Gc=25;
 G3.Gr=8; G3.Gc=8;
 G4.Gr=8; G4.Gc=13;
 G5.Gr=8; G5.Gc=18;
 G6.Gr=11; G6.Gc=8;
 G7.Gr=11; G7.Gc=13;
 G8.Gr=11; G8.Gc=18;
 G9.Gr=19; G9.Gc=1;
 G10.Gr=19; G10.Gc=25;

 //Game Start
 Disp(21,27);
 cout<<"(P:Pacman) (G:Ghost) (*:Pacdot) (#:Wall)"<<endl;

 //Game
 do
 {
  MoveP();
  MoveG(G1); MoveG(G2); MoveG(G3); MoveG(G4); MoveG(G5); MoveG(G6); MoveG(G7); MoveG(G8); MoveG(G9); MoveG(G10);
  clrscr();
  Disp(21,27);
 }while(Points!=210 && Death==0);

 //Game End
 if(!Death)
  cout<<"Conglaturations! You Win!!";
 else
  cout<<"GAME OVER";

 getch();
}

//Function to display game + Update score
void Disp(int R,int C)
{
 for(int i=0;i<R;i++)
 {
  for(int j=0;j<C;j++)
   cout<<Maze[i][j]<<" ";
  cout<<"   ";
  cout<<endl;
 }
 Score(); //Updates Score
}

//Function to move 'P'
void MoveP()
{
 char Step;
 cout<<"Input Move (WASD): ";
 Step=getch(); //Input without 'Enter'

 //'WASD' checker
 if(Step=='W'||Step=='w')
 {
  if(CheckWallP(P0.Pr-1,P0.Pc)==0)
  {
   Maze[P0.Pr--][P0.Pc]=' ';
   Maze[P0.Pr][P0.Pc]='P';
  }
  else
   cout<<"Input Move (WASD): ";
 }
 if(Step=='A'||Step=='a')
 {
  if(CheckWallP(P0.Pr,P0.Pc-1)==0)
  {
   Maze[P0.Pr][P0.Pc--]=' ';
   Maze[P0.Pr][P0.Pc]='P';
  }
  else
   cout<<"Input Move (WASD): ";
 }
 if(Step=='S'||Step=='s')
 {
  if(CheckWallP(P0.Pr+1,P0.Pc)==0)
  {
   Maze[P0.Pr++][P0.Pc]=' ';
   Maze[P0.Pr][P0.Pc]='P';
  }
  else
   cout<<"Input Move (WASD): ";
 }
 if(Step=='D'||Step=='d')
 {
  if(CheckWallP(P0.Pr,P0.Pc+1)==0)
  {
   Maze[P0.Pr][P0.Pc++]=' ';
   Maze[P0.Pr][P0.Pc]='P';
  }
  else
   cout<<"Input Move (WASD): ";
 }
 if(Step=='V'||Step=='v')
  Points=210; //Bonus Cheatcode
 CheckGhost();
}

//Function to move 'G' randomly
void MoveG(Ghost &G)
{
 int GStep, MoveCheck=0;
 int WGCheck=CheckWallG(G.Gr-1,G.Gc)+CheckWallG(G.Gr,G.Gc-1)+CheckWallG(G.Gr+1,G.Gc)+CheckWallG(G.Gr,G.Gc+1);

 //Loop to ensure 'G' always moves
 while(MoveCheck==0 && WGCheck!=4)
 {
  MoveCheck=0;
  GStep=random(100); //Random Movement Generator
  if(GStep%4==0 && CheckWallG(G.Gr-1,G.Gc)==0)
  {
   Maze[G.Gr][G.Gc]=MazeScore[G.Gr][G.Gc];
   MazeGhost[G.Gr][G.Gc]=' ';
   Maze[--G.Gr][G.Gc]='G';
   MazeGhost[G.Gr][G.Gc]='G';
   MoveCheck++;
  }
  else if(GStep%4==1 && CheckWallG(G.Gr,G.Gc-1)==0)
  {
   Maze[G.Gr][G.Gc]=MazeScore[G.Gr][G.Gc];
   MazeGhost[G.Gr][G.Gc]=' ';
   Maze[G.Gr][--G.Gc]='G';
   MazeGhost[G.Gr][G.Gc]='G';
   MoveCheck++;
  }
  else if(GStep%4==2 && CheckWallG(G.Gr+1,G.Gc)==0)
  {
   Maze[G.Gr][G.Gc]=MazeScore[G.Gr][G.Gc];
   MazeGhost[G.Gr][G.Gc]=' ';
   Maze[++G.Gr][G.Gc]='G';
   MazeGhost[G.Gr][G.Gc]='G';
   MoveCheck++;
  }
  else if(GStep%4==3 && CheckWallG(G.Gr,G.Gc+1)==0)
  {
   Maze[G.Gr][G.Gc]=MazeScore[G.Gr][G.Gc];
   MazeGhost[G.Gr][G.Gc]=' ';
   Maze[G.Gr][++G.Gc]='G';
   MazeGhost[G.Gr][G.Gc]='G';
   MoveCheck++;
  }
  CheckGhost();//Update for collision with 'P'
 }
}

//Function to check for presence of '#' for 'P'
int CheckWallP(int R,int C)
{
 if(Maze[R][C]=='#')
  return 1;
 else
  return 0;
}

//Function to check for presence of '#' or 'G' for 'G'
int CheckWallG(int R,int C)
{
 if(Maze[R][C]=='#' || MazeGhost[R][C]=='G')
  return 1;
 else
  return 0;
}

//Function to check for collision of 'P' with 'G'
void CheckGhost()
{
 if(P0.Pr==G1.Gr && P0.Pc==G1.Gc)
 {
  Maze[P0.Pr][P0.Pc]='G';
  Death++;
 }
 else if(P0.Pr==G2.Gr && P0.Pc==G2.Gc)
 {
  Maze[P0.Pr][P0.Pc]='G';
  Death++;
 }
 else if(P0.Pr==G3.Gr && P0.Pc==G3.Gc)
 {
  Maze[P0.Pr][P0.Pc]='G';
  Death++;
 }
 else if(P0.Pr==G4.Gr && P0.Pc==G4.Gc)
 {
  Maze[P0.Pr][P0.Pc]='G';
  Death++;
 }
 else if(P0.Pr==G5.Gr && P0.Pc==G5.Gc)
 {
  Maze[P0.Pr][P0.Pc]='G';
  Death++;
 }
 else if(P0.Pr==G6.Gr && P0.Pc==G6.Gc)
 {
  Maze[P0.Pr][P0.Pc]='G';
  Death++;
 }
 else if(P0.Pr==G7.Gr && P0.Pc==G7.Gc)
 {
  Maze[P0.Pr][P0.Pc]='G';
  Death++;
 }
 else if(P0.Pr==G8.Gr && P0.Pc==G8.Gc)
 {
  Maze[P0.Pr][P0.Pc]='G';
  Death++;
 }
 else if(P0.Pr==G9.Gr && P0.Pc==G9.Gc)
 {
  Maze[P0.Pr][P0.Pc]='G';
  Death++;
 }
 else if(P0.Pr==G10.Gr && P0.Pc==G10.Gc)
 {
  Maze[P0.Pr][P0.Pc]='G';
  Death++;
 }
}

//Function to calculate score
void Score()
{
 if(MazeScore[P0.Pr][P0.Pc]=='*')
 {
  Points++;
  MazeScore[P0.Pr][P0.Pc]=' ';
 }
 cout<<"Score: "<<Points<<endl;
}